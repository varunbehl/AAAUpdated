package com.aaa.rspweb.lib;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;

import com.aaa.rspweb.pages.RSPManageUserPage;
import com.aaa.rspweb.pages.RSPUserDetailsPage;

public class RSPUserDetailsLib extends RSPCommonLib {

	private static final Object getCurrentSystemTime = null;
	private static final By String = null;

	public List<String> getUserLoginTimes() throws Throwable{ 
		List<WebElement> currentLoginRecords=getWebElementList(RSPUserDetailsPage.loginRecords,"loginRecords");
		List<String> loginTimes=new ArrayList<>();
		for(WebElement loginRecord:currentLoginRecords){
			loginTimes.add(loginRecord.findElement(By.tagName("td")).getAttribute("title"));
		}
		return loginTimes;
	}

	public void validateSortOrderUserLoginTimes(List<String> loginTimes) throws Throwable {
		boolean isUserLogonTimesSorted=true;
		String initialDate = null,comparisionDate = null;
		for(int i=0;i<=loginTimes.size();i++){
			SimpleDateFormat date = new SimpleDateFormat("dd-MM-yyyy HH:mm");
			initialDate =loginTimes.get(i);
			comparisionDate =loginTimes.get(i+1);
			Date dateCompare = new SimpleDateFormat("MM/dd/yyyy hh:mm a").parse(initialDate);
			Date dateCompareTo = new SimpleDateFormat("MM/dd/yyyy hh:mm a").parse(comparisionDate);
			if (!(date.format(dateCompare).compareTo(date.format(dateCompareTo)) >= 0)) {
				isUserLogonTimesSorted=false;
				break;
			}
		}
		if (isUserLogonTimesSorted) {
			reporter.SuccessReport("Validate successful logins are displayed in sorted order from newest to oldest", "logins are displayed in sorted order from newest to oldest");
		} else {
			reporter.failureReport("Validate successful logins are displayed in sorted order from newest to oldest", "logins are not displayed in sorted order from newest to oldest. Displayed Order: "+ initialDate+ "->"+comparisionDate);
		}	
	}
	
	public String getUserLastLoginTime(){
		String lastLoginTime=getAttributeValue(RSPManageUserPage.lblLastLoginTime, "title");
		return lastLoginTime;
	}
	
	public String getUserLastLogoutTime(){
		String lastLoginTime=getAttributeValue(RSPManageUserPage.lblLastLoginTime, "title");
		return lastLoginTime;
	}
	
	//Compare Login time taken from Machine and Application are equal
	public void validateUserLastLoginTime(String userLoginSystemTime) throws Throwable {
		String ApplicationLogintime= getUserLastLoginTime();
		if(ApplicationLogintime.equals(userLoginSystemTime)){
		reporter.SuccessReport("Validate userLoginSystemTime should be equal to userLoginLogTime ", "userLoginSystemTime is equal to userLoginLogTime");
		}
		else{
			reporter.failureReport("Validate userLoginSystemTime should be equal to userLoginLogTime ", "userLoginSystemTime is not equal to userLoginLogTime");
		}
	}
	
	//Validate application logout time
		public void validateUserLastLogoutTime(String userLogoutTime) throws Throwable {
			String ApplicationLogoutTime= getUserLastLogoutTime();
			if(ApplicationLogoutTime.equals(userLogoutTime)){
			reporter.SuccessReport("Validate userLoginSystemTime should be equal to userLoginLogTime ", "userLoginSystemTime is equal to userLoginLogTime");
			}
			else{
				reporter.failureReport("Validate userLoginSystemTime should be equal to userLoginLogTime ", "userLoginSystemTime is not equal to userLoginLogTime");
			}
		}
	
}






